generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
  MYTHIC
}

enum AnimalClass {
  INSECTA
  ARACHNIDA
  CHILOPODA
  DIPLOPODA
}

model Card {
  id String @id @default(uuid()) @db.Uuid
  latitude Decimal
  longitude Decimal
  pictureUrl String
  rarity Rarity
  obtainmentDate DateTime
  animalId String @db.Uuid
  animal Animal @relation(fields: [animalId], references: [id])
  ownerId String @db.Uuid
  owner User @relation("owner", fields: [ownerId], references: [id])
  discovererId String @db.Uuid
  discoverer User @relation("discoverer", fields: [discovererId], references: [id])
  usersATrades Trade[] @relation("cardA")
  usersBTrades Trade[] @relation("cardB")
}

model Animal {
  id String @id @default(uuid()) @db.Uuid
  name String
  latinName String
  description String
  animalClass AnimalClass
  cards Card[]
}

model User {
  id String @id @default(uuid()) @db.Uuid
  name String @unique
  email String @unique
  bio String?
  pictureUrl String?
  passwordHash String
  ownedCards Card[] @relation("owner")
  discoveredCards Card[] @relation("discoverer")
  tradedACards Trade[] @relation("userA")
  tradedBCards Trade[] @relation("userB")
  isDeleted DateTime?
}

model Trade {
  id Int @id @default(autoincrement())
  userAId String @db.Uuid
  userA User @relation("userA", fields: [userAId], references: [id])
  userBId String? @db.Uuid
  userB User? @relation("userB", fields: [userBId], references: [id])
  cardAId String @db.Uuid
  cardA Card @relation("cardA", fields: [cardAId], references: [id])
  cardBId String? @db.Uuid
  cardB Card? @relation("cardB", fields: [cardBId], references: [id])
}